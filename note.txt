Tips

1, comment the install part in windows cmake file otherwise configure failed

2, dependency

windows version depends:
- openssl(ssl, crypto)

linux version depends:
- openssl(ssl, crypto)
- snappy (disable gtest and benchmark compile)
- lz4
- zstd

3, change one line code to pass the compile in vs2019

Communicator.cc:207

int CommMessageIn::feedback(const void *buf, size_t size)

to 

int CommMessageIn::feedback(const char *buf, size_t size)

4, workflow will generate _include dir for header path when built, maybe no need to use this dir

5, do not use generated _lib dir, just link to every single component static lib

6, use standalone third party include and source code to compile the ssl and crypto lib as dependency
the prebuild platform must be accurate, for now:
windows: vs2019
linux: should build in specific system, ubuntu and centos may does not shared the same so, you can just link to system lib if you like
remember to modify the ignore file and do not lose the .a and .so file when upload
copy the .so.1.xx as .so to disable the soft link

7, just compile the workflow source to project, the original cmake file too complex

8, snappy link to sub project, copyed the build header to source dir